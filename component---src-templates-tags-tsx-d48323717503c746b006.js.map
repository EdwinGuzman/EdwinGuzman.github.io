{"version":3,"sources":["webpack:///./src/templates/tags.tsx","webpack:///./src/components/PostCard.tsx"],"names":["Tags","pageContext","data","location","tag","edges","totalCount","allMarkdownRemark","tagData","allTagYaml","find","n","node","id","toLowerCase","lang","config","title","name","content","description","property","siteUrl","pathname","facebook","twitter","split","className","css","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","isHome","SiteMain","PostFeed","map","key","fields","slug","post","pageQuery","PostCard","large","date","Date","frontmatter","datetime","format","displayDatetime","image","PostCardStyles","PostCardLarge","showImage","PostCardImageLink","to","PostCardImage","childImageSharp","fluid","alt","style","height","PostCardContent","PostCardContentLink","PostCardHeader","tags","PostCardPrimaryTag","PostCardTitle","PostCardExcerpt","excerpt","PostCardMeta","PostCardBylineContent","dateTime","timeToRead","lighten","colors","lightgrey","darkmode","darkgrey","blue","midgrey"],"mappings":"6RAsHeA,UAtEF,EAAGC,cAAaC,OAAMC,eACjC,MAAMC,EAAMH,EAAYG,IAAMH,EAAYG,IAAM,IAC1C,MAAEC,EAAF,WAASC,GAAeJ,EAAKK,kBAC7BC,EAAUN,EAAKO,WAAWJ,MAAMK,KACpCC,GAAKA,EAAEC,KAAKC,GAAGC,gBAAkBV,EAAIU,eAGvC,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,oBAAMC,KAAMC,IAAOD,OACnB,yBACGX,EADH,MACWY,IAAOC,OAElB,oBAAMC,KAAK,cAAcC,SAASX,aAAA,EAAAA,EAASI,MAAOJ,EAAQI,KAAKQ,YAAc,KAC7E,oBAAMC,SAAS,eAAeF,QAASH,IAAOC,QAC9C,oBAAMI,SAAS,UAAUF,QAAQ,YACjC,oBAAME,SAAS,WAAWF,QAAU,GAAEf,OAASY,IAAOC,UACtD,oBAAMI,SAAS,SAASF,QAASH,IAAOM,QAAUnB,EAASoB,WAC1DP,IAAOQ,UAAY,oBAAMH,SAAS,oBAAoBF,QAASH,IAAOQ,WACvE,oBAAMN,KAAK,eAAeC,QAAQ,wBAClC,oBAAMD,KAAK,gBAAgBC,QAAU,GAAEf,OAASY,IAAOC,UACvD,oBAAMC,KAAK,cAAcC,QAASH,IAAOM,QAAUnB,EAASoB,WAC3DP,IAAOS,SACN,oBACEP,KAAK,eACLC,QAAU,IAAGH,IAAOS,QAAQC,MAAM,wBAAwB,MAIhE,YAAC,IAAD,KACE,sBACEC,UAAU,sBACVC,IAAG,YAAE,CAACC,IAAYC,OAElB,mBAAKF,IAAG,YAAE,CAACG,IAAOC,OAChB,mBAAKJ,IAAKK,KACR,YAAC,IAAD,CAASC,QAAQ,MAGrB,YAAC,IAAD,CAAmBN,IAAKK,IAAON,UAAU,uBACvC,YAAC,IAAD,CAAWA,UAAU,cAAcvB,GACnC,YAAC,IAAD,CAAiBuB,UAAU,qBACxBnB,aAAA,EAAAA,EAASI,KAAKQ,aACbZ,EAAQI,KAAKQ,YAEb,iDACmBd,EAAa,GAAQA,EAAF,SACpB,IAAfA,GAAoB,SACL,IAAfA,GAAoB,eAM/B,oBAAMO,GAAG,YAAYe,IAAG,YAAE,CAACO,IAAUJ,OACnC,mBAAKH,IAAKK,KACR,mBAAKL,IAAG,YAAE,CAACQ,OACR/B,EAAMgC,IAAI,EAAGzB,UACZ,YAAC,IAAD,CAAU0B,IAAK1B,EAAK2B,OAAOC,KAAMC,KAAM7B,QAK/C,YAAC,IAAD,SAQD,MAAM8B,EAAY,c,6LCtGlB,MAAMC,EAAoC,EAAGF,OAAMG,SAAQ,MAAY,UAC5E,MAAMC,EAAO,IAAIC,KAAKL,EAAKM,YAAYF,MAEjCG,EAAWC,YAAOJ,EAAM,cAExBK,EAAkBD,YAAOJ,EAAM,eACrC,OACE,uBACElB,UAAY,aAAYc,EAAKM,YAAYI,MAAQ,GAAK,cACpDP,EAAQ,kBAAoB,KAE9BhB,IAAG,YAAE,CAACwB,EAAgBR,GAASS,KAE9BZ,EAAKM,YAAYI,OAASV,EAAKM,YAAYO,WAC1C,YAAC,IAAD,CAAM3B,UAAU,uBAAuBC,IAAK2B,EAAmBC,GAAIf,EAAKF,OAAOC,KAAMF,IAAKG,EAAKF,OAAOC,MACpG,YAACiB,EAAD,CAAe9B,UAAU,oBACtB,UAAAc,EAAKM,mBAAL,mBAAkBI,aAAlB,mBAAyBO,uBAAzB,eAA0CC,QACzC,YAAC,IAAD,CACEC,IAAQnB,EAAKM,YAAY9B,MAAnB,eACN4C,MAAO,CAAEC,OAAQ,QACjBH,MAAOlB,EAAKM,YAAYI,MAAMO,gBAAgBC,UAMxD,YAACI,EAAD,CAAiBpC,UAAU,oBAAoBW,IAAI,qBACjD,YAAC,IAAD,CAAMX,UAAU,yBAAyBC,IAAKoC,EAAqBR,GAAIf,EAAKF,OAAOC,KAAMF,IAAKG,EAAKF,OAAOC,MACxG,YAACyB,EAAD,CAAgBtC,UAAU,mBAAmBW,IAAI,UAC9CG,EAAKM,YAAYmB,MAChB,YAACC,EAAD,CAAoBxC,UAAU,yBAC3Bc,EAAKM,YAAYmB,KAAK,IAG3B,YAACE,EAAD,CAAezC,UAAU,mBAAmBc,EAAKM,YAAY9B,QAE/D,YAACoD,EAAD,CAAiB1C,UAAU,oBAAoBW,IAAI,UACjD,qBAAIG,EAAKM,YAAYuB,SAAW7B,EAAK6B,WAGzC,YAACC,EAAD,CAAc5C,UAAU,kBACtB,YAAC6C,EAAD,CAAuB7C,UAAU,4BAC/B,oBAAMA,UAAU,yBACd,oBAAM8C,SAAUzB,GAAWE,GAAwB,IACnD,oBAAMvB,UAAU,QAAhB,KAFF,IAEwCc,EAAKiC,WAF7C,kBAWNtB,EAAiBxB,YAAH,oKAUS+C,YAAQ,OAAQC,IAAOC,WAVhC,iFAeOF,YAAQ,OAAQC,IAAOE,UAf9B,MAmBdzB,EAAgB,CAAH,glBAmDbE,EAAoB,CAAH,mGAOjBE,EAAgB,mBAAH,mBAAG,CAAH,sCAGHmB,IAAOC,UAHJ,mDAObd,EAAkB,mBAAH,mBAAG,CAAH,0EAMfC,EAAsBpC,YAAH,yCAIdgD,IAAOG,SAJO,kCAWnBZ,EAAqB,mBAAH,mBAAG,CAAH,0BAGbS,IAAOI,KAHM,oFAUlBZ,EAAgB,kBAAH,mBAAG,CAAH,kKAUbC,EAAkB,uBAAH,mBAAG,CAAH,sEAKRM,YAAQ,MAAOC,IAAOK,SALd,iBASfV,EAAe,sBAAH,mBAAG,CAAH,yEAMZC,EAAwB,mBAAH,mBAAG,CAAH,kEAMhBG,YAAQ,MAAOC,IAAOK,SANN,4HAmBdN,YAAQ,MAAOC,IAAOG,UAnBR,0FA8BrBd,EAAiB,sBAAH,mBAAG,CAAH,2CAeAU,YAAQ,OAAQC,IAAOG,UAS3BJ,YAAQ,MAAOC,IAAOC,WAKpBD,IAAOE","file":"component---src-templates-tags-tsx-d48323717503c746b006.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport { FluidObject } from \"gatsby-image\";\n\nimport { Footer } from \"../components/Footer\";\nimport SiteNav from \"../components/header/SiteNav\";\nimport { PostCard } from \"../components/PostCard\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport IndexLayout from \"../layouts\";\nimport {\n  inner,\n  outer,\n  PostFeed,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteNavMain,\n  SiteArchiveHeader,\n} from \"../styles/shared\";\nimport { PageContext } from \"./post\";\nimport { Helmet } from \"react-helmet\";\nimport config from \"../website-config\";\n\ninterface TagTemplateProps {\n  location: Location;\n  pageContext: {\n    tag: string;\n  };\n  data: {\n    allTagYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst Tags = ({ pageContext, data, location }: TagTemplateProps) => {\n  const tag = pageContext.tag ? pageContext.tag : \"\";\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const tagData = data.allTagYaml.edges.find(\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {tag} - {config.title}\n        </title>\n        <meta name=\"description\" content={tagData?.node ? tagData.node.description : \"\"} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split(\"https://twitter.com/\")[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header\n          className=\"site-archive-header\"\n          css={[SiteHeader, SiteArchiveHeader]}\n        >\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} />\n            </div>\n          </div>\n          <SiteHeaderContent css={inner} className=\"site-header-content\">\n            <SiteTitle className=\"site-title\">{tag}</SiteTitle>\n            <SiteDescription className=\"site-description\">\n              {tagData?.node.description ? (\n                tagData.node.description\n              ) : (\n                <>\n                  A collection of {totalCount > 1 && `${totalCount} posts`}\n                  {totalCount === 1 && \"1 post\"}\n                  {totalCount === 0 && \"No posts\"}\n                </>\n              )}\n            </SiteDescription>\n          </SiteHeaderContent>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed]}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          id\n          description\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            excerpt\n            tags\n            date\n            showImage\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1240) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fluid(quality: 100, srcSetBreakpoints: [40, 80, 120]) {\n                      ...GatsbyImageSharpFluid\n                    }\n                  }\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n","import { format } from \"date-fns\";\nimport { Link } from \"gatsby\";\nimport Img from \"gatsby-image\";\nimport _ from \"lodash\";\nimport { lighten } from \"polished\";\nimport React from \"react\";\n\nimport { css } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\n\nimport { colors } from \"../styles/colors\";\nimport { PageContext } from \"../templates/post\";\n\nexport interface PostCardProps {\n  post: PageContext;\n  large?: boolean;\n}\n\nexport const PostCard: React.FC<PostCardProps> = ({ post, large = false }) => {\n  const date = new Date(post.frontmatter.date);\n  // 2018-08-20\n  const datetime = format(date, \"yyyy-MM-dd\");\n  // 20 AUG 2018\n  const displayDatetime = format(date, \"dd LLL yyyy\");\n  return (\n    <article\n      className={`post-card ${post.frontmatter.image ? \"\" : \"no-image\"} ${\n        large ? \"post-card-large\" : \"\"\n      }`}\n      css={[PostCardStyles, large && PostCardLarge]}\n    >\n      {post.frontmatter.image && post.frontmatter.showImage && (\n        <Link className=\"post-card-image-link\" css={PostCardImageLink} to={post.fields.slug} key={post.fields.slug}>\n          <PostCardImage className=\"post-card-image\">\n            {post.frontmatter?.image?.childImageSharp?.fluid && (\n              <Img\n                alt={`${post.frontmatter.title} cover image`}\n                style={{ height: \"100%\" }}\n                fluid={post.frontmatter.image.childImageSharp.fluid}\n              />\n            )}\n          </PostCardImage>\n        </Link>\n      )}\n      <PostCardContent className=\"post-card-content\" key=\"post-card-content\">\n        <Link className=\"post-card-content-link\" css={PostCardContentLink} to={post.fields.slug} key={post.fields.slug}>\n          <PostCardHeader className=\"post-card-header\" key=\"header\">\n            {post.frontmatter.tags && (\n              <PostCardPrimaryTag className=\"post-card-primary-tag\">\n                {post.frontmatter.tags[0]}\n              </PostCardPrimaryTag>\n            )}\n            <PostCardTitle className=\"post-card-title\">{post.frontmatter.title}</PostCardTitle>\n          </PostCardHeader>\n          <PostCardExcerpt className=\"post-card-excerpt\" key=\"excert\">\n            <p>{post.frontmatter.excerpt || post.excerpt}</p>\n          </PostCardExcerpt>\n        </Link>\n        <PostCardMeta className=\"post-card-meta\">\n          <PostCardBylineContent className=\"post-card-byline-content\">\n            <span className=\"post-card-byline-date\">\n              <time dateTime={datetime}>{displayDatetime}</time>{\" \"}\n              <span className=\"bull\">&bull;</span> {post.timeToRead} min read\n            </span>\n          </PostCardBylineContent>\n        </PostCardMeta>\n      </PostCardContent>\n    </article>\n  );\n};\n\nconst PostCardStyles = css`\n  position: relative;\n  flex: 1 1 301px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  margin: 0 0 40px;\n  padding: 0 20px 40px;\n  min-height: 220px;\n  /* border-bottom: 1px solid color(var(--lightgrey) l(+12%)); */\n  border-bottom: 1px solid ${lighten(\"0.12\", colors.lightgrey)};\n  background-size: cover;\n\n  @media (prefers-color-scheme: dark) {\n    /* border-bottom-color: color(var(--darkmode) l(+8%)); */\n    border-bottom-color: ${lighten(\"0.08\", colors.darkmode)};\n  }\n`;\n\nconst PostCardLarge = css`\n  @media (min-width: 795px) {\n    flex: 1 1 100%;\n    flex-direction: row;\n    padding-bottom: 40px;\n    min-height: 280px;\n    border-top: 0;\n\n    :not(.no-image) .post-card-header {\n      margin-top: 0;\n    }\n\n    .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n      min-height: 380px;\n    }\n\n    .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n`;\n\nconst PostCardImageLink = css`\n  position: relative;\n  display: block;\n  overflow: hidden;\n  border-radius: 5px 5px 0 0;\n`;\n\nconst PostCardImage = styled.div`\n  width: auto;\n  height: 200px;\n  background: ${colors.lightgrey} no-repeat center center;\n  background-size: cover;\n`;\n\nconst PostCardContent = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst PostCardContentLink = css`\n  position: relative;\n  display: block;\n  /* color: var(--darkgrey); */\n  color: ${colors.darkgrey};\n\n  :hover {\n    text-decoration: none;\n  }\n`;\n\nconst PostCardPrimaryTag = styled.div`\n  margin: 0 0 0.2em;\n  /* color: var(--blue); */\n  color: ${colors.blue};\n  font-size: 1.2rem;\n  font-weight: 500;\n  letter-spacing: 0.2px;\n  text-transform: uppercase;\n`;\n\nconst PostCardTitle = styled.h2`\n  margin: 0 0 0.4em;\n  line-height: 1.15em;\n  transition: color 0.2s ease-in-out;\n\n  @media (prefers-color-scheme: dark) {\n    color: rgba(255, 255, 255, 0.85);\n  }\n`;\n\nconst PostCardExcerpt = styled.section`\n  font-family: Georgia, serif;\n\n  @media (prefers-color-scheme: dark) {\n    /* color: color(var(--midgrey) l(+10%)); */\n    color: ${lighten(\"0.1\", colors.midgrey)} !important;\n  }\n`;\n\nconst PostCardMeta = styled.footer`\n  display: flex;\n  align-items: flex-start;\n  padding: 0;\n`;\n\nconst PostCardBylineContent = styled.div`\n  flex: 1 1 50%;\n  display: flex;\n  flex-direction: column;\n  margin: 0;\n  /* color: color(var(--midgrey) l(+10%)); */\n  color: ${lighten(\"0.1\", colors.midgrey)};\n  font-size: 1.2rem;\n  line-height: 1.4em;\n  font-weight: 400;\n  letter-spacing: 0.2px;\n  text-transform: uppercase;\n\n  span {\n    margin: 0;\n  }\n\n  a {\n    /* color: color(var(--darkgrey) l(+20%)); */\n    color: ${lighten(\"0.2\", colors.darkgrey)};\n    font-weight: 600;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    a {\n      color: rgba(255, 255, 255, 0.75);\n    }\n  }\n`;\n\nconst PostCardHeader = styled.header`\n  margin: 15px 0 0;\n`;\n\nexport const StaticAvatar = css`\n  display: block;\n  overflow: hidden;\n  margin: 0 0 0 -6px;\n  width: 34px;\n  height: 34px;\n  border: #fff 2px solid;\n  border-radius: 100%;\n\n  @media (prefers-color-scheme: dark) {\n    /* border-color: color(var(--darkgrey) l(+2%)); */\n    border-color: ${lighten(\"0.02\", colors.darkgrey)};\n  }\n`;\n\nexport const AuthorProfileImage = css`\n  display: block;\n  width: 100%;\n  height: 100%;\n  /* background: color(var(--lightgrey) l(+10%)); */\n  background: ${lighten(\"0.1\", colors.lightgrey)};\n  border-radius: 100%;\n  object-fit: cover;\n\n  @media (prefers-color-scheme: dark) {\n    background: ${colors.darkmode};\n  }\n`;\n"],"sourceRoot":""}